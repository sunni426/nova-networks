--- /atlas/home/hzhou/.local/lib/python3.6/site-packages/torch/nn/modules/container.py
+++ /atlas/home/hzhou/.local/lib/python3.6/site-packages/torch/nn/modules/container.py
@@ -1,11 +1,10 @@
 class ModuleList(Module):
     r"""Holds submodules in a list.
 
-    :class:`~torch.nn.ModuleList` can be indexed like a regular Python list, but
-    modules it contains are properly registered, and will be visible by all
-    :class:`~torch.nn.Module` methods.
+    ModuleList can be indexed like a regular Python list, but modules it
+    contains are properly registered, and will be visible by all Module methods.
 
-    Args:
+    Arguments:
         modules (iterable, optional): an iterable of modules to add
 
     Example::
@@ -22,9 +21,7 @@
                 return x
     """
 
-    _modules: Dict[str, Module]  # type: ignore[assignment]
-
-    def __init__(self, modules: Optional[Iterable[Module]] = None) -> None:
+    def __init__(self, modules=None):
         super(ModuleList, self).__init__()
         if modules is not None:
             self += modules
@@ -38,18 +35,17 @@
             idx += len(self)
         return str(idx)
 
-    @_copy_to_script_wrapper
-    def __getitem__(self, idx: int) -> Union[Module, 'ModuleList']:
+    def __getitem__(self, idx):
         if isinstance(idx, slice):
-            return self.__class__(list(self._modules.values())[idx])
+            return ModuleList(list(self._modules.values())[idx])
         else:
             return self._modules[self._get_abs_string_index(idx)]
 
-    def __setitem__(self, idx: int, module: Module) -> None:
-        idx = self._get_abs_string_index(idx)
+    def __setitem__(self, idx, module):
+        idx = operator.index(idx)
         return setattr(self, str(idx), module)
 
-    def __delitem__(self, idx: Union[int, slice]) -> None:
+    def __delitem__(self, idx):
         if isinstance(idx, slice):
             for k in range(len(self._modules))[idx]:
                 delattr(self, str(k))
@@ -59,56 +55,36 @@
         str_indices = [str(i) for i in range(len(self._modules))]
         self._modules = OrderedDict(list(zip(str_indices, self._modules.values())))
 
-    @_copy_to_script_wrapper
-    def __len__(self) -> int:
+    def __len__(self):
         return len(self._modules)
 
-    @_copy_to_script_wrapper
-    def __iter__(self) -> Iterator[Module]:
+    def __iter__(self):
         return iter(self._modules.values())
 
-    def __iadd__(self, modules: Iterable[Module]) -> 'ModuleList':
+    def __iadd__(self, modules):
         return self.extend(modules)
 
-    def __add__(self, other: Iterable[Module]) -> 'ModuleList':
-        combined = ModuleList()
-        for i, module in enumerate(chain(self, other)):
-            combined.add_module(str(i), module)
-        return combined
-
-    @_copy_to_script_wrapper
     def __dir__(self):
         keys = super(ModuleList, self).__dir__()
         keys = [key for key in keys if not key.isdigit()]
         return keys
 
-    def insert(self, index: int, module: Module) -> None:
-        r"""Insert a given module before a given index in the list.
-
-        Args:
-            index (int): index to insert.
-            module (nn.Module): module to insert
-        """
-        for i in range(len(self._modules), index, -1):
-            self._modules[str(i)] = self._modules[str(i - 1)]
-        self._modules[str(index)] = module
-
-    def append(self, module: Module) -> 'ModuleList':
+    def append(self, module):
         r"""Appends a given module to the end of the list.
 
-        Args:
+        Arguments:
             module (nn.Module): module to append
         """
         self.add_module(str(len(self)), module)
         return self
 
-    def extend(self, modules: Iterable[Module]) -> 'ModuleList':
+    def extend(self, modules):
         r"""Appends modules from a Python iterable to the end of the list.
 
-        Args:
+        Arguments:
             modules (iterable): iterable of modules to append
         """
-        if not isinstance(modules, container_abcs.Iterable):
+        if not isinstance(modules, Iterable):
             raise TypeError("ModuleList.extend should be called with an "
                             "iterable, but got " + type(modules).__name__)
         offset = len(self)
@@ -116,5 +92,3 @@
             self.add_module(str(offset + i), module)
         return self
 
-    # remove forward alltogether to fallback on Module's _forward_unimplemented
-