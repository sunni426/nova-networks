--- /atlas/home/hzhou/.local/lib/python3.6/site-packages/torch/nn/modules/activation.py
+++ /atlas/home/hzhou/.local/lib/python3.6/site-packages/torch/nn/modules/activation.py
@@ -1,41 +1,28 @@
-class ReLU(Module):
-    r"""Applies the rectified linear unit function element-wise:
+class ReLU(Threshold):
+    r"""Applies the rectified linear unit function element-wise
+    :math:`\text{ReLU}(x)= \max(0, x)`
 
-    :math:`\text{ReLU}(x) = (x)^+ = \max(0, x)`
+    .. image:: scripts/activation_images/ReLU.png
 
     Args:
         inplace: can optionally do the operation in-place. Default: ``False``
 
     Shape:
-        - Input: :math:`(*)`, where :math:`*` means any number of dimensions.
-        - Output: :math:`(*)`, same shape as the input.
-
-    .. image:: ../scripts/activation_images/ReLU.png
+        - Input: :math:`(N, *)` where `*` means, any number of additional
+          dimensions
+        - Output: :math:`(N, *)`, same shape as the input
 
     Examples::
 
         >>> m = nn.ReLU()
         >>> input = torch.randn(2)
         >>> output = m(input)
+    """
 
+    def __init__(self, inplace=False):
+        super(ReLU, self).__init__(0, 0, inplace)
 
-      An implementation of CReLU - https://arxiv.org/abs/1603.05201
-
-        >>> m = nn.ReLU()
-        >>> input = torch.randn(2).unsqueeze(0)
-        >>> output = torch.cat((m(input),m(-input)))
-    """
-    __constants__ = ['inplace']
-    inplace: bool
-
-    def __init__(self, inplace: bool = False):
-        super(ReLU, self).__init__()
-        self.inplace = inplace
-
-    def forward(self, input: Tensor) -> Tensor:
-        return F.relu(input, inplace=self.inplace)
-
-    def extra_repr(self) -> str:
-        inplace_str = 'inplace=True' if self.inplace else ''
+    def extra_repr(self):
+        inplace_str = 'inplace' if self.inplace else ''
         return inplace_str
 