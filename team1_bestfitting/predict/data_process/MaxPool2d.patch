--- /atlas/home/hzhou/.local/lib/python3.6/site-packages/torch/nn/modules/pooling.py
+++ /atlas/home/hzhou/.local/lib/python3.6/site-packages/torch/nn/modules/pooling.py
@@ -7,19 +7,15 @@
     can be precisely described as:
 
     .. math::
-        \begin{aligned}
-            out(N_i, C_j, h, w) ={} & \max_{m=0, \ldots, kH-1} \max_{n=0, \ldots, kW-1} \\
-                                    & \text{input}(N_i, C_j, \text{stride[0]} \times h + m,
-                                                   \text{stride[1]} \times w + n)
-        \end{aligned}
 
-    If :attr:`padding` is non-zero, then the input is implicitly padded with negative infinity on both sides
+        \begin{equation*}
+        \text{out}(N_i, C_j, h, w)  = \max_{m=0, \ldots, kH-1} \max_{n=0, \ldots, kW-1}
+                               \text{input}(N_i, C_j, \text{stride}[0] * h + m, \text{stride}[1] * w + n)
+        \end{equation*}
+
+    If :attr:`padding` is non-zero, then the input is implicitly zero-padded on both sides
     for :attr:`padding` number of points. :attr:`dilation` controls the spacing between the kernel points.
     It is harder to describe, but this `link`_ has a nice visualization of what :attr:`dilation` does.
-
-    Note:
-        When ceil_mode=True, sliding windows are allowed to go off-bounds if they start within the left padding
-        or the input. Sliding windows that would start in the right padded region are ignored.
 
     The parameters :attr:`kernel_size`, :attr:`stride`, :attr:`padding`, :attr:`dilation` can either be:
 
@@ -33,20 +29,19 @@
         padding: implicit zero padding to be added on both sides
         dilation: a parameter that controls the stride of elements in the window
         return_indices: if ``True``, will return the max indices along with the outputs.
-                        Useful for :class:`torch.nn.MaxUnpool2d` later
+                        Useful when Unpooling later
         ceil_mode: when True, will use `ceil` instead of `floor` to compute the output shape
 
     Shape:
-        - Input: :math:`(N, C, H_{in}, W_{in})` or :math:`(C, H_{in}, W_{in})`
-        - Output: :math:`(N, C, H_{out}, W_{out})` or :math:`(C, H_{out}, W_{out})`, where
+        - Input: :math:`(N, C, H_{in}, W_{in})`
+        - Output: :math:`(N, C, H_{out}, W_{out})` where
 
           .. math::
-              H_{out} = \left\lfloor\frac{H_{in} + 2 * \text{padding[0]} - \text{dilation[0]}
-                    \times (\text{kernel\_size[0]} - 1) - 1}{\text{stride[0]}} + 1\right\rfloor
+              H_{out} = \left\lfloor\frac{H_{in} + 2 * \text{padding}[0] - \text{dilation}[0]
+                    * (\text{kernel_size}[0] - 1) - 1}{\text{stride}[0]} + 1\right\rfloor
 
-          .. math::
-              W_{out} = \left\lfloor\frac{W_{in} + 2 * \text{padding[1]} - \text{dilation[1]}
-                    \times (\text{kernel\_size[1]} - 1) - 1}{\text{stride[1]}} + 1\right\rfloor
+              W_{out} = \left\lfloor\frac{W_{in} + 2 * \text{padding}[1] - \text{dilation}[1]
+                    * (\text{kernel_size}[1] - 1) - 1}{\text{stride}[1]} + 1\right\rfloor
 
     Examples::
 
@@ -61,13 +56,8 @@
         https://github.com/vdumoulin/conv_arithmetic/blob/master/README.md
     """
 
-    kernel_size: _size_2_t
-    stride: _size_2_t
-    padding: _size_2_t
-    dilation: _size_2_t
+    def forward(self, input):
+        return F.max_pool2d(input, self.kernel_size, self.stride,
+                            self.padding, self.dilation, self.ceil_mode,
+                            self.return_indices)
 
-    def forward(self, input: Tensor):
-        return F.max_pool2d(input, self.kernel_size, self.stride,
-                            self.padding, self.dilation, ceil_mode=self.ceil_mode,
-                            return_indices=self.return_indices)
-